[
    {
        "buggy_code": "/* Write a function to display the Fibonacci sequence using recursion */\nfunction fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n + 1) + fibonacci(n + 2);\n  }\n}",
        "correct_code": "/* Write a function to display the Fibonacci sequence using recursion */\nfunction fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}",
        "bug_type": "general,functionality"
    },
    {
        "buggy_code": "/* Write a function that logs the string 'Hello' when the user clicks a button */\nfunction buttonAction() {\n  const button = document.getElementById('myButton');\nbutton.addEventListener('clock', () => {\n  console.log('Hello');\n  });\n}",
        "correct_code": "/* Write a function that logs the string 'Hello' when the user clicks a button */\nfunction buttonAction() {\n  const button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n  console.log('Hello');\n  });\n}",
        "bug_type": "ui-ux"
    },
    {
        "buggy_code":"/* Given an array of integers return only the even numbers */\nfunction getEvenNumbers(arr) {\n  return arr.filter(num => num % 2 === 1);\n  }",
        "correct_code": "/* Given an array of integers return only the even numbers */\nfunction getEvenNumbers(arr) {  return arr.filter(num => num % 2 === 0);\n  }",
        "bug_type": "functionality"
    },
    {
        "buggy_code": "/* Write a function that takes the role of a user and checks if it is administrator */\nfunction isAdmin(userRole) {\n    return userRole == \"admin\";\n}",
        "correct_code": "/* Write a function that takes the role of a user and checks if it is administrator */\nfunction isAdmin(userRole) {\n    return userRole === \"admin\";\n}",
        "bug_type": "network-security"
    },
    {
        "buggy_code": "/* Write a function that toggles the visibility of a button when the user clicks it */\n function toggleButton(){\n   let button = document.getElementById('button');\nbutton.disabled = !button.enabled",
        "correct_code": "/* Write a function that toggles the visibility of a button when the user clicks it */\n function toggleButton(){\n   let button = document.getElementById('button');\nbutton.disabled = !button.disabled",
        "bug_type": "ui-ux"
    },
    {
        "buggy_code": "/* Write a function that checks if a given number is prime */\n function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n / i === 0) return false;\n    }\n    return true;\n}",
        "correct_code": "/* Write a function that checks if a given number is prime */\n function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}",
        "bug_type": "functionality"
    },
    {
        "buggy_code": "function handleUserInput() {\n    let userInput = document.getElementById('userInput').value;\n    document.getElementById('output').innerHTML = userInput;\n}",
        "correct_code": "function handleUserInput() {\n    let userInput = document.getElementById('userInput').value;\n    document.getElementById('output').innerText = userInput;\n}",
        "bug_type": "network-security"
    },
    {
        "buggy_code": "/* Write a function that logs a countdown */\nfunction countDown(n) {\n    while (n > 0) {\n        console.log(n);\n        n = n + 1;\n    }\n}",
        "correct_code": "/* Write a function that logs a countdown */\nfunction countDown(n) {\n    while (n > 0) {\n        console.log(n);\n        n = n - 1;\n    }\n}",
        "bug_type": "compatibility-performance,functionality"
    },
    {
        "buggy_code": "/* Write a function that given an array of numbers returns an array of same length with each item doubled*/\nfunction doubleAndFlatten(arr) {\n    return arr.flatMap(num => [num * 2]);\n}",
        "correct_code": "/* Write a function that given an array of numbers returns an array of same length with each item doubled*/\nfunction doubleAndFlatten(arr) {\n    return arr.map(num => [num * 2]).flat();\n}\n",
        "bug_type": "compatibility-performance,functionality"
    },
    {
        "buggy_code": "/* Write a function that given a string it replaces all spaces with underscore '_'*/\nfunction replaceAllSpaces(str) {\n    return str.replaceAll(\" \", \"_\");\n}\n",
        "correct_code": "/* Write a function that given a string it replaces all spaces with underscore '_'*/\nfunction replaceAllSpaces(str) {\n    return str.replace(/ /g, \"_\");\n}\n",
        "bug_type": "compatibility-performance"
    },
    {
        "buggy_code": "/* Write a function that creates an progress bar animation with for a given interval */\nfunction animateCounter(element, start, end) {\n    let i = start;\n    let interval = setInterval(() => {\n        element.value = i;\n        if (i++ >= end) clearInterval(interval);\n    }, 50);\n}",
        "correct_code": "/* Write a function that creates an progress bar animation with for a given interval */\nfunction animateCounter(element, start, end) {\n    let i = start;\n    let interval = setInterval(() => {\n        element.textContent = i;\n        if (i++ >= end) clearInterval(interval);\n    }, 50);\n}",
        "bug_type":"ui-ux"
    },
    {
        "buggy_code": "/* Write a function that fetches user from an api */\nconst fetchUser = async (userId) => {\n    const response = await fetch(`https://api.example.com/users/${userId}`);\n    const data = await response.json();\n    return data;\n};",
        "correct_code": "/* Write a function that fetches user from an api */\nconst fetchUser = async (userId) => {\n    const response = await fetch(`https://api.example.com/users/${userId}`);\n    if (!response.ok) throw new Error('User not found');\n    const data = await response.json();\n    return data;\n};",
        "bug_type":"network-security"

    }
]
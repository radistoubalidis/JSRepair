[
    {
        "buggy_code": "/* Write a function to display the Fibonacci sequence using recursion */\nfunction fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n + 1) + fibonacci(n + 2);\n  }\n}",
        "correct_code": "/* Write a function to display the Fibonacci sequence using recursion */\nfunction fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}",
        "bug_type": "general,functionality"
    },
    {
        "buggy_code": "/* Write a function that logs the string 'Hello' when the user clicks a button */\nfunction buttonAction() {\n  const button = document.getElementById('myButton');\nbutton.addEventListener('clock', () => {\n  console.log('Hello');\n  });\n}",
        "correct_code": "/* Write a function that logs the string 'Hello' when the user clicks a button */\nfunction buttonAction() {\n  const button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n  console.log('Hello');\n  });\n}",
        "bug_type": "ui-ux"
    },
    {
        "buggy_code":"/* Given an array of integers return only the even numbers */\nfunction getEvenNumbers(arr) {\n  return arr.filter(num => num % 2 === 1);\n  }",
        "correct_code": "/* Given an array of integers return only the even numbers */\nfunction getEvenNumbers(arr) {  return arr.filter(num => num % 2 === 0);\n  }",
        "bug_type": "functionality"
    },
    {
        "buggy_code": "/* Write a function that takes the role of a user and checks if it is administrator */\nfunction isAdmin(userRole) {\n    return userRole == \"admin\";\n}",
        "correct_code": "/* Write a function that takes the role of a user and checks if it is administrator */\nfunction isAdmin(userRole) {\n    return userRole === \"admin\";\n}",
        "bug_type": "network-security"
    },
    {
        "buggy_code": "/* Write a function that toggles the visibility of a button when the user clicks it */\n function toggleButton(){\n   let button = document.getElementById('button');\nbutton.disabled = !button.enabled",
        "correct_code": "/* Write a function that toggles the visibility of a button when the user clicks it */\n function toggleButton(){\n   let button = document.getElementById('button');\nbutton.disabled = !button.disabled",
        "bug_type": "ui-ux"
    },
    {
        "buggy_code": "/* Write a function that checks if a given number is prime */\n function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n / i === 0) return false;\n    }\n    return true;\n}",
        "correct_code": "/* Write a function that checks if a given number is prime */\n function isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}",
        "bug_type": "functionality"
    },
    {
        "buggy_code": "function handleUserInput() {\n    let userInput = document.getElementById('userInput').value;\n    document.getElementById('output').innerHTML = userInput;\n}",
        "correct_code": "function handleUserInput() {\n    let userInput = document.getElementById('userInput').value;\n    document.getElementById('output').innerText = userInput;\n}",
        "bug_type": "network-security"
    },
    {
        "buggy_code": "/* Given a string 'text', return its md5 hash equivalent string. If the input is an empty string, return null. */\nfunction toMD5(text){\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5('text')\n}\n\n",
        "correct_code": "/* Given a string 'text', return its md5 hash equivalent string. If the input is an empty string, return null. */\nfunction toMD5(text){\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n",
        "bug_type": "functionality"
    },
    {
        "buggy_code": "/* Write a function that returns a user object given their username */\nfunction getUser(username){\n    return db.query(`SELECT * FROM users where username = '${username}'`);\n}",
        "correct_code": "/* Write a function that returns a user object given their username */\nfunction getUser(username){\n    return db.query(\"SELECT * FROM users where username = ?\", [username]);\n}",
        "bug_type": "network-security"
    },
    {
        "buggy_code": "/* Write a function that concatenates a list of strings */\nfunction joinStrings(strings) {\n    let result = \"\";\n    for (let str of strings) {\n        result += str;\n    }\n    return result;\n}",
        "correct_code": "/* Write a function that concatenates a list of strings */\nfunction joinStrings(strings) {\n    let result = \"\";\n    for (let str of strings) {\n        result = result.concat(str);\n    }\n    return result;\n}",
        "bug_type": "compatibility-performance"
    }
]
[
    {
        "buggy_code": "// Write a function to display the Fibonacci sequence using recursion\nfunction fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n + 1) + fibonacci(n + 2);\n  }\n}",
        "correct_code": "// Write a function to display the Fibonacci sequence using recursion\nfunction fibonacci(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2);\n  }\n}",
        "bug_type": "general"
    },
    {
        "buggy_code": "// Write a function that fetches data via a get request to an API given the url\nfunction fetchData(url) {\n  let data;\n  fetch(url)\n    .then(response => response.json())\n    .then(json => {\n      data = json;\n    })\n    .catch(error => {\n      console.error(\"Error fetching data:\", error);\n    });\n  return data;\n}",
        "correct_code": "// Write a function that fetches data via a get request to an API given the url\nasync function fetchData(url) {\n  try {\n      const response = await fetch(url); // Await the fetch response\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n  } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      return null;\n  }\n}",
        "bug_type": "network-security"
    },
    {
        "buggy_code": "// Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}",
        "correct_code": "// Given a list of numbers, return the sum of squares of the numbers in the list that are odd. Ignore numbers that are negative or not integers. If the input list is empty, return 0.\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}",
        "bug_type": "functionality"
    },
    {
        "buggy_code": "// Write a function that toggles the visibility of an html element when a user clicks a button\nfunction toggleContent() {\n  const content = document.getElementById(\"content\");\n  const button = document.getElementById(\"toggle-button\");  \n  \n  if (content.style.display === \"none\") {\n      content.style.display = \"block\";\n      button.innerText = \"Show\";\n  } else {\n      content.style.display = \"none\";\n      button.innerText = \"Hide\";\n  }\n}",
        "correct_code": "// Write a function that toggles the visibility of an html element when a user clicks a button\nfunction toggleContent() {\n  const content = document.getElementById(\"content\");\n  const button = document.getElementById(\"toggle-button\");  \n  \n  if (content.style.display === \"none\") {\n      content.style.display = \"block\";\n      button.innerText = \"Hide\";\n  } else {\n      content.style.display = \"none\";\n      button.innerText = \"Show\";\n  }\n}",
        "bug_type": "ui-ux"
    },
    {
        "buggy_code": "// Given a list of dom element ids with arbitrary length, write a function that changes their background color to yellow\nfunction highlightItems(ids) {\n  ids.forEach(id => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.style.backgroundColor = \"yellow\";\n    }\n  });\n}",
        "correct_code": "// Given a list of dom element ids with arbitrary length, write a function that changes their background color to yellow\nfunction highlightItems(ids) {\n  const elements = ids.map(id => document.getElementById(id));\n  elements.forEach(element => {\n    if (element) {\n      element.style.backgroundColor = \"yellow\";\n    }\n  });\n}",
        "bug_type": "compatibility-performance"
    }
]